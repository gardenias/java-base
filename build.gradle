buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:0.7.0")
        classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
        classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1")
    }
}

apply plugin: 'build-dashboard'
apply plugin: 'project-report'

configure(subprojects) { project ->
    version = qualifyVersionIfNecessary(version)

    ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

    apply from: "$rootDir/gradle/dependencies.gradle"
    apply plugin: "propdeps"
    apply plugin: "java"
    apply from: "$rootDir/gradle/coverage.gradle"
//    apply plugin: 'checkstyle'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += "-parameters"
    }

    sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        exclude(["**/Abstract*.class", '**/*$*'])
    }

    repositories {
        jcenter()
    }

//    checkstyle {
//        configFile = file("$rootDir/config/checkstyle.xml")
//    }

//    checkstyleMain.source = "src/main/java"

    test {
        maxParallelForks = 2
    }

    dependencies {
        compile libs.test, libs.log, libs.base
        testCompile libs.test
        testCompile 'org.assertj:assertj-core:3.6.2'
    }
}
/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */

def qualifyVersionIfNecessary(version)
{
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}

project(':javase') {
    dependencies {
        compile project(':sample-api')
    }
}
